// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Todo /> Should Match Snapshot 1`] = `
<Todo
  classes={Object {}}
  data={
    Object {
      "completed": false,
      "content": "content",
      "id": 1,
      "title": "title",
    }
  }
  setSaving={[MockFunction]}
>
  <div
    onClick={[Function]}
  >
    <WithStyles(ForwardRef(ListItem))
      button={true}
      className="undefined"
      id={1}
      key="title"
    >
      <ForwardRef(ListItem)
        button={true}
        className="undefined"
        classes={
          Object {
            "alignItemsFlexStart": "MuiListItem-alignItemsFlexStart",
            "button": "MuiListItem-button",
            "container": "MuiListItem-container",
            "dense": "MuiListItem-dense",
            "disabled": "Mui-disabled",
            "divider": "MuiListItem-divider",
            "focusVisible": "Mui-focusVisible",
            "gutters": "MuiListItem-gutters",
            "root": "MuiListItem-root",
            "secondaryAction": "MuiListItem-secondaryAction",
            "selected": "Mui-selected",
          }
        }
        id={1}
      >
        <WithStyles(ForwardRef(ButtonBase))
          className="MuiListItem-root undefined MuiListItem-gutters MuiListItem-button"
          component="div"
          disabled={false}
          focusVisibleClassName="Mui-focusVisible"
          id={1}
        >
          <ForwardRef(ButtonBase)
            className="MuiListItem-root undefined MuiListItem-gutters MuiListItem-button"
            classes={
              Object {
                "disabled": "Mui-disabled",
                "focusVisible": "Mui-focusVisible",
                "root": "MuiButtonBase-root",
              }
            }
            component="div"
            disabled={false}
            focusVisibleClassName="Mui-focusVisible"
            id={1}
          >
            <div
              aria-disabled={false}
              className="MuiButtonBase-root MuiListItem-root undefined MuiListItem-gutters MuiListItem-button"
              id={1}
              onBlur={[Function]}
              onDragLeave={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
              onMouseLeave={[Function]}
              onMouseUp={[Function]}
              onTouchEnd={[Function]}
              onTouchMove={[Function]}
              onTouchStart={[Function]}
              role="button"
              tabIndex={0}
            >
              <ForwardRef(AssignmentIcon)>
                <WithStyles(ForwardRef(SvgIcon))>
                  <ForwardRef(SvgIcon)
                    classes={
                      Object {
                        "colorAction": "MuiSvgIcon-colorAction",
                        "colorDisabled": "MuiSvgIcon-colorDisabled",
                        "colorError": "MuiSvgIcon-colorError",
                        "colorPrimary": "MuiSvgIcon-colorPrimary",
                        "colorSecondary": "MuiSvgIcon-colorSecondary",
                        "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                        "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                        "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                        "root": "MuiSvgIcon-root",
                      }
                    }
                  >
                    <svg
                      aria-hidden={true}
                      className="MuiSvgIcon-root"
                      focusable="false"
                      viewBox="0 0 24 24"
                    >
                      <path
                        d="M19 3h-4.18C14.4 1.84 13.3 1 12 1c-1.3 0-2.4.84-2.82 2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-7 0c.55 0 1 .45 1 1s-.45 1-1 1-1-.45-1-1 .45-1 1-1zm2 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z"
                      />
                    </svg>
                  </ForwardRef(SvgIcon)>
                </WithStyles(ForwardRef(SvgIcon))>
              </ForwardRef(AssignmentIcon)>
              <div>
                title
              </div>
              <WithStyles(memo)
                center={false}
              >
                <ForwardRef(TouchRipple)
                  center={false}
                  classes={
                    Object {
                      "child": "MuiTouchRipple-child",
                      "childLeaving": "MuiTouchRipple-childLeaving",
                      "childPulsate": "MuiTouchRipple-childPulsate",
                      "ripple": "MuiTouchRipple-ripple",
                      "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                      "rippleVisible": "MuiTouchRipple-rippleVisible",
                      "root": "MuiTouchRipple-root",
                    }
                  }
                >
                  <span
                    className="MuiTouchRipple-root"
                  >
                    <TransitionGroup
                      childFactory={[Function]}
                      component={null}
                      exit={true}
                    />
                  </span>
                </ForwardRef(TouchRipple)>
              </WithStyles(memo)>
            </div>
          </ForwardRef(ButtonBase)>
        </WithStyles(ForwardRef(ButtonBase))>
      </ForwardRef(ListItem)>
    </WithStyles(ForwardRef(ListItem))>
  </div>
</Todo>
`;
