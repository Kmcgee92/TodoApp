// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<TodoDetails /> Should Match Snapshot 1`] = `
<TodoDetails
  classes={Object {}}
  setSaving={[MockFunction]}
>
  <div>
    <header>
      <WithStyles(ForwardRef(Button))
        onClick={[Function]}
      >
        <ForwardRef(Button)
          classes={
            Object {
              "colorInherit": "MuiButton-colorInherit",
              "contained": "MuiButton-contained",
              "containedPrimary": "MuiButton-containedPrimary",
              "containedSecondary": "MuiButton-containedSecondary",
              "containedSizeLarge": "MuiButton-containedSizeLarge",
              "containedSizeSmall": "MuiButton-containedSizeSmall",
              "disableElevation": "MuiButton-disableElevation",
              "disabled": "Mui-disabled",
              "endIcon": "MuiButton-endIcon",
              "focusVisible": "Mui-focusVisible",
              "fullWidth": "MuiButton-fullWidth",
              "iconSizeLarge": "MuiButton-iconSizeLarge",
              "iconSizeMedium": "MuiButton-iconSizeMedium",
              "iconSizeSmall": "MuiButton-iconSizeSmall",
              "label": "MuiButton-label",
              "outlined": "MuiButton-outlined",
              "outlinedPrimary": "MuiButton-outlinedPrimary",
              "outlinedSecondary": "MuiButton-outlinedSecondary",
              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
              "root": "MuiButton-root",
              "sizeLarge": "MuiButton-sizeLarge",
              "sizeSmall": "MuiButton-sizeSmall",
              "startIcon": "MuiButton-startIcon",
              "text": "MuiButton-text",
              "textPrimary": "MuiButton-textPrimary",
              "textSecondary": "MuiButton-textSecondary",
              "textSizeLarge": "MuiButton-textSizeLarge",
              "textSizeSmall": "MuiButton-textSizeSmall",
            }
          }
          onClick={[Function]}
        >
          <WithStyles(ForwardRef(ButtonBase))
            className="MuiButton-root MuiButton-text"
            component="button"
            disabled={false}
            focusRipple={true}
            focusVisibleClassName="Mui-focusVisible"
            onClick={[Function]}
            type="button"
          >
            <ForwardRef(ButtonBase)
              className="MuiButton-root MuiButton-text"
              classes={
                Object {
                  "disabled": "Mui-disabled",
                  "focusVisible": "Mui-focusVisible",
                  "root": "MuiButtonBase-root",
                }
              }
              component="button"
              disabled={false}
              focusRipple={true}
              focusVisibleClassName="Mui-focusVisible"
              onClick={[Function]}
              type="button"
            >
              <button
                className="MuiButtonBase-root MuiButton-root MuiButton-text"
                disabled={false}
                onBlur={[Function]}
                onClick={[Function]}
                onDragLeave={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                onKeyUp={[Function]}
                onMouseDown={[Function]}
                onMouseLeave={[Function]}
                onMouseUp={[Function]}
                onTouchEnd={[Function]}
                onTouchMove={[Function]}
                onTouchStart={[Function]}
                tabIndex={0}
                type="button"
              >
                <span
                  className="MuiButton-label"
                >
                  Incomplete
                </span>
                <WithStyles(memo)
                  center={false}
                >
                  <ForwardRef(TouchRipple)
                    center={false}
                    classes={
                      Object {
                        "child": "MuiTouchRipple-child",
                        "childLeaving": "MuiTouchRipple-childLeaving",
                        "childPulsate": "MuiTouchRipple-childPulsate",
                        "ripple": "MuiTouchRipple-ripple",
                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                        "root": "MuiTouchRipple-root",
                      }
                    }
                  >
                    <span
                      className="MuiTouchRipple-root"
                    >
                      <TransitionGroup
                        childFactory={[Function]}
                        component={null}
                        exit={true}
                      />
                    </span>
                  </ForwardRef(TouchRipple)>
                </WithStyles(memo)>
              </button>
            </ForwardRef(ButtonBase)>
          </WithStyles(ForwardRef(ButtonBase))>
        </ForwardRef(Button)>
      </WithStyles(ForwardRef(Button))>
    </header>
    <WithStyles(ForwardRef(Typography))
      gutterBottom={true}
      variant="h6"
    >
      <ForwardRef(Typography)
        classes={
          Object {
            "alignCenter": "MuiTypography-alignCenter",
            "alignJustify": "MuiTypography-alignJustify",
            "alignLeft": "MuiTypography-alignLeft",
            "alignRight": "MuiTypography-alignRight",
            "body1": "MuiTypography-body1",
            "body2": "MuiTypography-body2",
            "button": "MuiTypography-button",
            "caption": "MuiTypography-caption",
            "colorError": "MuiTypography-colorError",
            "colorInherit": "MuiTypography-colorInherit",
            "colorPrimary": "MuiTypography-colorPrimary",
            "colorSecondary": "MuiTypography-colorSecondary",
            "colorTextPrimary": "MuiTypography-colorTextPrimary",
            "colorTextSecondary": "MuiTypography-colorTextSecondary",
            "displayBlock": "MuiTypography-displayBlock",
            "displayInline": "MuiTypography-displayInline",
            "gutterBottom": "MuiTypography-gutterBottom",
            "h1": "MuiTypography-h1",
            "h2": "MuiTypography-h2",
            "h3": "MuiTypography-h3",
            "h4": "MuiTypography-h4",
            "h5": "MuiTypography-h5",
            "h6": "MuiTypography-h6",
            "noWrap": "MuiTypography-noWrap",
            "overline": "MuiTypography-overline",
            "paragraph": "MuiTypography-paragraph",
            "root": "MuiTypography-root",
            "srOnly": "MuiTypography-srOnly",
            "subtitle1": "MuiTypography-subtitle1",
            "subtitle2": "MuiTypography-subtitle2",
          }
        }
        gutterBottom={true}
        variant="h6"
      >
        <h6
          className="MuiTypography-root MuiTypography-h6 MuiTypography-gutterBottom"
        >
          <WithStyles(ForwardRef(InputBase))
            autoComplete="off"
            autoFocus={true}
            inputProps={
              Object {
                "aria-label": "naked",
              }
            }
            name="title"
            onBlur={[Function]}
            onChange={[Function]}
            value=""
          >
            <ForwardRef(InputBase)
              autoComplete="off"
              autoFocus={true}
              classes={
                Object {
                  "adornedEnd": "MuiInputBase-adornedEnd",
                  "adornedStart": "MuiInputBase-adornedStart",
                  "colorSecondary": "MuiInputBase-colorSecondary",
                  "disabled": "Mui-disabled",
                  "error": "Mui-error",
                  "focused": "Mui-focused",
                  "formControl": "MuiInputBase-formControl",
                  "fullWidth": "MuiInputBase-fullWidth",
                  "input": "MuiInputBase-input",
                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                  "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                  "inputMarginDense": "MuiInputBase-inputMarginDense",
                  "inputMultiline": "MuiInputBase-inputMultiline",
                  "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                  "marginDense": "MuiInputBase-marginDense",
                  "multiline": "MuiInputBase-multiline",
                  "root": "MuiInputBase-root",
                }
              }
              inputProps={
                Object {
                  "aria-label": "naked",
                }
              }
              name="title"
              onBlur={[Function]}
              onChange={[Function]}
              value=""
            >
              <div
                className="MuiInputBase-root"
                onClick={[Function]}
              >
                <input
                  aria-label="naked"
                  autoComplete="off"
                  autoFocus={true}
                  className="MuiInputBase-input"
                  name="title"
                  onAnimationStart={[Function]}
                  onBlur={[Function]}
                  onChange={[Function]}
                  onFocus={[Function]}
                  type="text"
                  value=""
                />
              </div>
            </ForwardRef(InputBase)>
          </WithStyles(ForwardRef(InputBase))>
        </h6>
      </ForwardRef(Typography)>
    </WithStyles(ForwardRef(Typography))>
    <WithStyles(ForwardRef(Divider))
      style={
        Object {
          "backgroundColor": "grey",
          "marginBottom": "20px",
        }
      }
    >
      <ForwardRef(Divider)
        classes={
          Object {
            "absolute": "MuiDivider-absolute",
            "flexItem": "MuiDivider-flexItem",
            "inset": "MuiDivider-inset",
            "light": "MuiDivider-light",
            "middle": "MuiDivider-middle",
            "root": "MuiDivider-root",
            "vertical": "MuiDivider-vertical",
          }
        }
        style={
          Object {
            "backgroundColor": "grey",
            "marginBottom": "20px",
          }
        }
      >
        <hr
          className="MuiDivider-root"
          style={
            Object {
              "backgroundColor": "grey",
              "marginBottom": "20px",
            }
          }
        />
      </ForwardRef(Divider)>
    </WithStyles(ForwardRef(Divider))>
    <WithStyles(ForwardRef(Typography))
      gutterBottom={true}
      variant="h6"
    >
      <ForwardRef(Typography)
        classes={
          Object {
            "alignCenter": "MuiTypography-alignCenter",
            "alignJustify": "MuiTypography-alignJustify",
            "alignLeft": "MuiTypography-alignLeft",
            "alignRight": "MuiTypography-alignRight",
            "body1": "MuiTypography-body1",
            "body2": "MuiTypography-body2",
            "button": "MuiTypography-button",
            "caption": "MuiTypography-caption",
            "colorError": "MuiTypography-colorError",
            "colorInherit": "MuiTypography-colorInherit",
            "colorPrimary": "MuiTypography-colorPrimary",
            "colorSecondary": "MuiTypography-colorSecondary",
            "colorTextPrimary": "MuiTypography-colorTextPrimary",
            "colorTextSecondary": "MuiTypography-colorTextSecondary",
            "displayBlock": "MuiTypography-displayBlock",
            "displayInline": "MuiTypography-displayInline",
            "gutterBottom": "MuiTypography-gutterBottom",
            "h1": "MuiTypography-h1",
            "h2": "MuiTypography-h2",
            "h3": "MuiTypography-h3",
            "h4": "MuiTypography-h4",
            "h5": "MuiTypography-h5",
            "h6": "MuiTypography-h6",
            "noWrap": "MuiTypography-noWrap",
            "overline": "MuiTypography-overline",
            "paragraph": "MuiTypography-paragraph",
            "root": "MuiTypography-root",
            "srOnly": "MuiTypography-srOnly",
            "subtitle1": "MuiTypography-subtitle1",
            "subtitle2": "MuiTypography-subtitle2",
          }
        }
        gutterBottom={true}
        variant="h6"
      >
        <h6
          className="MuiTypography-root MuiTypography-h6 MuiTypography-gutterBottom"
        >
          <WithStyles(ForwardRef(TextField))
            InputProps={
              Object {
                "className": undefined,
                "disableUnderline": true,
              }
            }
            autoComplete="off"
            fullWidth={true}
            inputProps={
              Object {
                "aria-label": "naked",
              }
            }
            multiline={true}
            name="content"
            onBlur={[Function]}
            onChange={[Function]}
            rows={30}
            value=""
          >
            <ForwardRef(TextField)
              InputProps={
                Object {
                  "className": undefined,
                  "disableUnderline": true,
                }
              }
              autoComplete="off"
              classes={
                Object {
                  "root": "MuiTextField-root",
                }
              }
              fullWidth={true}
              inputProps={
                Object {
                  "aria-label": "naked",
                }
              }
              multiline={true}
              name="content"
              onBlur={[Function]}
              onChange={[Function]}
              rows={30}
              value=""
            >
              <WithStyles(ForwardRef(FormControl))
                className="MuiTextField-root"
                color="primary"
                disabled={false}
                error={false}
                fullWidth={true}
                required={false}
                variant="standard"
              >
                <ForwardRef(FormControl)
                  className="MuiTextField-root"
                  classes={
                    Object {
                      "fullWidth": "MuiFormControl-fullWidth",
                      "marginDense": "MuiFormControl-marginDense",
                      "marginNormal": "MuiFormControl-marginNormal",
                      "root": "MuiFormControl-root",
                    }
                  }
                  color="primary"
                  disabled={false}
                  error={false}
                  fullWidth={true}
                  required={false}
                  variant="standard"
                >
                  <div
                    className="MuiFormControl-root MuiTextField-root MuiFormControl-fullWidth"
                  >
                    <WithStyles(ForwardRef(Input))
                      autoComplete="off"
                      autoFocus={false}
                      disableUnderline={true}
                      fullWidth={true}
                      inputProps={
                        Object {
                          "aria-label": "naked",
                        }
                      }
                      multiline={true}
                      name="content"
                      onBlur={[Function]}
                      onChange={[Function]}
                      rows={30}
                      value=""
                    >
                      <ForwardRef(Input)
                        autoComplete="off"
                        autoFocus={false}
                        classes={
                          Object {
                            "colorSecondary": "MuiInput-colorSecondary",
                            "disabled": "Mui-disabled",
                            "error": "Mui-error",
                            "focused": "Mui-focused",
                            "formControl": "MuiInput-formControl",
                            "fullWidth": "MuiInput-fullWidth",
                            "input": "MuiInput-input",
                            "inputMarginDense": "MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                            "marginDense": "MuiInput-marginDense",
                            "multiline": "MuiInput-multiline",
                            "root": "MuiInput-root",
                            "underline": "MuiInput-underline",
                          }
                        }
                        disableUnderline={true}
                        fullWidth={true}
                        inputProps={
                          Object {
                            "aria-label": "naked",
                          }
                        }
                        multiline={true}
                        name="content"
                        onBlur={[Function]}
                        onChange={[Function]}
                        rows={30}
                        value=""
                      >
                        <WithStyles(ForwardRef(InputBase))
                          autoComplete="off"
                          autoFocus={false}
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root",
                              "underline": null,
                            }
                          }
                          fullWidth={true}
                          inputComponent="input"
                          inputProps={
                            Object {
                              "aria-label": "naked",
                            }
                          }
                          multiline={true}
                          name="content"
                          onBlur={[Function]}
                          onChange={[Function]}
                          rows={30}
                          type="text"
                          value=""
                        >
                          <ForwardRef(InputBase)
                            autoComplete="off"
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiInputBase-adornedEnd",
                                "adornedStart": "MuiInputBase-adornedStart",
                                "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                "disabled": "Mui-disabled Mui-disabled",
                                "error": "Mui-error Mui-error",
                                "focused": "Mui-focused Mui-focused",
                                "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                "input": "MuiInputBase-input MuiInput-input",
                                "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                "root": "MuiInputBase-root MuiInput-root",
                              }
                            }
                            fullWidth={true}
                            inputComponent="input"
                            inputProps={
                              Object {
                                "aria-label": "naked",
                              }
                            }
                            multiline={true}
                            name="content"
                            onBlur={[Function]}
                            onChange={[Function]}
                            rows={30}
                            type="text"
                            value=""
                          >
                            <div
                              className="MuiInputBase-root MuiInput-root MuiInputBase-fullWidth MuiInput-fullWidth MuiInputBase-formControl MuiInput-formControl MuiInputBase-multiline MuiInput-multiline"
                              onClick={[Function]}
                            >
                              <textarea
                                aria-invalid={false}
                                aria-label="naked"
                                autoComplete="off"
                                autoFocus={false}
                                className="MuiInputBase-input MuiInput-input MuiInputBase-inputMultiline MuiInput-inputMultiline"
                                disabled={false}
                                name="content"
                                onAnimationStart={[Function]}
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                rows={30}
                                value=""
                              />
                            </div>
                          </ForwardRef(InputBase)>
                        </WithStyles(ForwardRef(InputBase))>
                      </ForwardRef(Input)>
                    </WithStyles(ForwardRef(Input))>
                  </div>
                </ForwardRef(FormControl)>
              </WithStyles(ForwardRef(FormControl))>
            </ForwardRef(TextField)>
          </WithStyles(ForwardRef(TextField))>
        </h6>
      </ForwardRef(Typography)>
    </WithStyles(ForwardRef(Typography))>
  </div>
</TodoDetails>
`;
